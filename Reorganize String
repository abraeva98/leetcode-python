class Solution:
    def reorganizeString(self, s: str) -> str:
        res = []    
        mapper = {}
        for letter in s:
            mapper[letter] = mapper.get(letter, 0) + 1
        
        heap = []
        for key, val in mapper.items():
            heap.append((-val, key))
        heapq.heapify(heap)

        while len(heap) > 0:
            mostFrequentLetter = heapq.heappop(heap) # (1, "b")
            if len(res) == 0 or res[len(res) - 1] != mostFrequentLetter[1]: 
                res.append(mostFrequentLetter[1])
                if mostFrequentLetter[0] != -1:
                    heapq.heappush(heap, (mostFrequentLetter[0] + 1, mostFrequentLetter[1]))
            else:
                if len(heap) > 0:
                    secondMostFrequent = heapq.heappop(heap)
                    res.append(secondMostFrequent[1])
                    if secondMostFrequent[0] != -1:
                        heapq.heappush(heap, (secondMostFrequent[0] + 1, secondMostFrequent[1]))
                    heapq.heappush(heap, mostFrequentLetter)
                else:    
                    return ""

        return "".join(res)
