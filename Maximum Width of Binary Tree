class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        queue = deque()
        queue.append((root, 0))
        maxWidth = float('-inf')

        while len(queue) > 0:
            _, firstNodeIdx = queue[0]
            numOfChildren = len(queue)
            for _ in range(numOfChildren):
                node, nodeIdx = queue.popleft()
                if node.left is not None:
                    queue.append((node.left, nodeIdx * 2))
                if node.right is not None:
                    queue.append((node.right, nodeIdx * 2 + 1))
            maxWidth = max(maxWidth, nodeIdx - firstNodeIdx + 1)
        
        return maxWidth
